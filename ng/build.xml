<?xml version="1.0" encoding="UTF-8"?>
<project name="Ng" default="dist" basedir=".">
    <description>
        The Ng language
    </description>
  <!-- set global properties for this build -->
  <property name="src.dir" location="src"/>
  <property name="gen.dir" location="../NgSourceGenerator/generated"/>
  <property name="unitTests.dir" location="tests"/>
  <property name="build.dir" location="build"/>
  <property name="dist.dir"  location="dist"/>
  <property name="tmp.dir" location="tmp"/>
  <property name="instrumented.dir" location="instrumented"/>
  <property name="reports.dir" location="reports"/>
  <property name="reports.xml.dir" location="${reports.dir}/junit-xml"/>
  <property name="reports.html.dir" location="${reports.dir}/junit-html"/>
  <property name="coverage.xml.dir" location="${reports.dir}/cobertura-xml"/>
  <property name="coverage.html.dir" location="${reports.dir}/cobertura-html"/>
  <property name="cobertura.dir" value="lib/cobertura-1.8" />

  <path id="cobertura.classpath">
    <fileset dir="${cobertura.dir}">
      <include name="cobertura.jar"/>
      <include name="lib/**/*.jar"/>
    </fileset>
  </path>
	
  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${tmp.dir}"/>
    <!-- Create the directory structure used by JUnit and Cobertura -->
	<mkdir dir="${instrumented.dir}"/>
	<mkdir dir="${reports.xml.dir}"/>
	<mkdir dir="${reports.html.dir}"/>
	<mkdir dir="${coverage.xml.dir}"/>
	<mkdir dir="${coverage.html.dir}"/>
  </target>

  <target name="compile" depends="init" description="compile the source " >
    <!-- Compile the java code from ${src.dir} and ${gen.dir} into ${build.dir} -->
    <javac destdir="${build.dir}" debug="yes">
      <src path="${src.dir}"/>
      <src path="${gen.dir}"/>
      <classpath refid="cobertura.classpath" />
    </javac>
    <!-- Compile the Unit Tests from ${unitTests.dir} into ${tmp.dir} -->
    <javac srcdir="${unitTests.dir}" destdir="${tmp.dir}" classpath="${build.dir}" debug="yes">
      <classpath refid="cobertura.classpath" />
    </javac>
  </target>

	<target name="instrument" depends="init,compile">
		<!--
			Remove the coverage data file and any old instrumentation.
		-->
		<delete file="cobertura.ser"/>
		<delete dir="${instrumented.dir}" />

		<!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
		<cobertura-instrument todir="${instrumented.dir}">
			<!--
				The following line causes instrument to ignore any
				source line containing a reference to log4j, for the
				purposes of coverage reporting.
			-->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${build.dir}">
				<!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>
	</target>
  
  <target name="test" depends="compile" description="run the Unit Tests">
	<junit printsummary="yes" fork="yes" forkmode="once" haltonfailure="yes">
		<!--
			Note the classpath order: instrumented classes are before the
			original (uninstrumented) classes.  This is important.
		-->
		<classpath location="${instrumented.dir}"/>
		<classpath location="${build.dir}"/>
		<classpath location="${tmp.dir}"/>

		<!--
			The instrumented classes reference classes used by the
			Cobertura runtime, so Cobertura and its dependencies
			must be on your classpath.
		-->
		<classpath refid="cobertura.classpath" />
		
		<formatter type="xml"/>
		
		<test name="${testcase}" todir="${reports.xml.dir}" if="testcase"/>
		
		<batchtest todir="${reports.xml.dir}" unless="testcase">
			<fileset dir="${unitTests.dir}">
				<include name="**/*Test.java" />
			</fileset>
		</batchtest>
	</junit>

	<junitreport todir="${reports.xml.dir}">
		<fileset dir="${reports.xml.dir}">
			<include name="TEST-*.xml"/>
		</fileset>
		<report format="frames" todir="${reports.html.dir}" />
	</junitreport>
 </target>

  <target name="dist" depends="test"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${dist.dir}/lib"/>

    <!-- Put everything in ${build.dir} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="${dist.dir}/lib/Ng-${DSTAMP}.jar" basedir="${build.dir}"/>
  </target>

	<target name="coverage-report">
		<!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
		<cobertura-report srcdir="${src.dir}:${generated.dir}" destdir="${coverage.xml.dir}" format="xml" />
	</target>

	<target name="alternate-coverage-report">
		<!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
		<cobertura-report destdir="${coverage.html.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>
  
  <target name="clean" description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${tmp.dir}"/>
	<delete dir="${instrumented.dir}"/>
	<delete dir="${reports.xml.dir}"/>
	<delete dir="${reports.html.dir}"/>
	<delete dir="${coverage.xml.dir}"/>
	<delete dir="${coverage.html.dir}"/>
  	<delete file="cobertura.ser"/>
  </target>

	<target name="coverage" depends="compile,instrument,test,coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>
</project>